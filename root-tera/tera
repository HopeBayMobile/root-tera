#!/system/bin/sh

export TERA_VERSION=0.10.2


ARG0="$0"
ARG0_NAME=`echo ${ARG0##*/}`
if [ "$ARG0_NAME" != "tera" ] ; then
    ARG0=`cat /proc/$$/cmdline`
    ARG0=`echo ${ARG0##*. }`
    ARG0=`echo ${ARG0%% *}`
fi

function umount_bind_sdcard()
{
    touch $MOUNT_MY_TERA/MY-TERA.var 2> /dev/null

    cat /proc/self/mounts > /dev/bind.tmp

    while read LINE ; do
        set -- $LINE
        if [ -f $2/MY-TERA.var -a "$2" != "$MOUNT_MY_TERA" ] ; then
            echo umount $2
            umount $2 2> /dev/null
        fi
    done < /dev/bind.tmp

    rm /dev/bind.tmp

    rm -f $MOUNT_MY_TERA/MY-TERA.var
}

if [ "$1" == "tee" ] ; then
    TERA_LOG="/data/data/com.hopebaytech.hcfsmgmt/tera.log"

    touch $TERA_LOG 2> /dev/null
    if [ $? -eq 0 ] ; then
        chmod 600 $TERA_LOG
        LS_APP=`ls -ld /data/data/com.hopebaytech.hcfsmgmt`
        set -- $LS_APP
        chown $3:$4 $TERA_LOG 2> /dev/null
    else
        TERA_LOG="/dev/null"
    fi

    while read -r LINE ; do
        echo $LINE >> $TERA_LOG
        echo $LINE
    done

    exit
fi
if [ "$1" == "umount_bind_sdcard" ] ; then
    umount_bind_sdcard
    exit
fi

if [ "$1" != "su" ] ; then
    export SU_OPTION=""

    MY_ID=`su --mount-master -c id`
    echo $MY_ID | grep -q "uid=0(root)"
    if [ $? -eq 0 ] ; then
        export SU_OPTION="--mount-master"
    fi

    #exec su $SU_OPTION -c $0 su $*
    exec su $SU_OPTION -c "$ARG0 su $* 2>&1 | $ARG0 tee"
    exit 1
fi

shift


ARG1="$1"

echo
echo Tera Version: $TERA_VERSION
echo

EXE=$ARG0
#EXE_NAME=`basename $EXE`
EXE_NAME=`echo ${ARG0##*/}`

function my_killall()
{
    if [ -e /system/bin/killall ] ; then
        killall $*
        return
    fi

    RET=1

    if [ "$1" == "" ] ; then
        (exit $RET)
        return
    fi

    SIG_NUM=""
    if [ "$2" != "" ] ; then
        SIG_NUM="$1"
        PROC_NAME="$2"
    else
        PROC_NAME="$1"
    fi

    PS_OPTION=""
    ps -A 2> /dev/null | grep -qw root
    if [ $? -eq 0 ] ; then
        PS_OPTION="-A"
    fi

    ps $PS_OPTION > /dev/ps.tmp

    while read LINE ; do
        set -- $LINE
        echo $9 | grep -qw $PROC_NAME
        if [ $? -ne 0 ] ; then
            continue
        fi
        kill $SIG_NUM $2
        RET=$?
    done < /dev/ps.tmp

    rm /dev/ps.tmp

    (exit $RET)
}

function bind_sdcard()
{
    touch $MOUNT_MY_TERA/MY-TERA.var

    TMP1="/dev/bind1.tmp"
    TMP2="/dev/bind2.tmp"
    rm -f $TMP1 $TMP2
    touch $TMP1
    touch $TMP2

    cat /proc/self/mounts > $TMP1
    while read LINE ; do
        KEY=`echo "${LINE#* }"`
        KEY=`echo "${KEY%% *}"`
        grep -q "^$KEY$" $TMP2
        if [ $? -eq 0 ] ; then
            continue
        fi
        echo $KEY >> $TMP2
    done < $TMP1

    while read LINE ; do
        if [ -d $LINE/MY-TERA -a ! -f $LINE/MY-TERA/MY-TERA.var ] ; then
            echo bind $LINE/MY-TERA
            mount -o bind $MOUNT_MY_TERA $LINE/MY-TERA
            chown root:sdcard_rw $LINE/MY-TERA
            chmod 0777 $LINE/MY-TERA
            HCFSvol unpin $LINE/MY-TERA
        elif [ -d $LINE/0/MY-TERA -a ! -f $LINE/0/MY-TERA/MY-TERA.var ] ; then
            echo bind $LINE/0/MY-TERA
            mount -o bind $MOUNT_MY_TERA $LINE/0/MY-TERA
            chown root:sdcard_rw $LINE/0/MY-TERA
            chmod 0777 $LINE/0/MY-TERA
            HCFSvol unpin $LINE/0/MY-TERA
        fi
    done < $TMP2

    ###
    # umount duplicate dirs
    cat /proc/self/mounts | grep "/MY-TERA " > $TMP1

    rm $TMP2
    touch $TMP2

    while read LINE ; do
        KEY=`echo ${LINE#* }`
        KEY=`echo ${KEY%% *}`
        grep -q "^$KEY$" $TMP2
        if [ $? -eq 0 ] ; then
            continue
        fi
        echo $KEY >> $TMP2
    done < $TMP1

    while read LINE ; do
        NUM=`grep " $LINE " /proc/self/mounts | grep -c "."`
        while [ $NUM -gt 1 ] ; do
            umount $LINE 2> /dev/null
            NUM=$(($NUM-1))
        done
    done < $TMP2
    ###

    rm $TMP1 $TMP2

    rm $MOUNT_MY_TERA/MY-TERA.var

    MY_TERA_DIR="/sdcard/MY-TERA"
    # VERSION_SDK: 23(Android 6.0)
    if [ $VERSION_SDK -le 23 ] ; then
        MY_TERA_DIR="/MY-TERA"

        cat /proc/self/mounts | grep -q " /storage "
        if [ $? -ne 0 ] ; then
            MY_TERA_DIR="/storage/MY-TERA"
        fi

        umount_bind_sdcard
        rm -rf $SDCARD/MY-TERA

        echo bind $MY_TERA_DIR

        mount -o rw,remount /
        mkdir -p $MY_TERA_DIR
        chmod 0777 $MY_TERA_DIR
        mount -o bind $MOUNT_MY_TERA $MY_TERA_DIR
        chown root:sdcard_rw $MY_TERA_DIR
        chmod 0777 $MY_TERA_DIR
        HCFSvol unpin $MY_TERA_DIR
        mount -o ro,remount /
    fi
}

function kill_open_files()
{
    PRE_PID=0
    for LINE in `echo /proc/[0-9]*/fd` ; do
        ls -l $LINE 2> /dev/null | grep -q "/MY-TERA/"
        if [ $? -ne 0 ] ; then
            continue
        fi

        PID=`echo ${LINE#*/proc/}`
        PID=`echo ${PID%%/*}`
        if [ $PID -eq $PRE_PID ] ; then
            continue
        fi

        kill $PID 2> /dev/null
        sleep 0.1
        kill -9 $PID 2> /dev/null

        PRE_PID=$PID
    done
}

function kill_mounts()
{
    grep "/MY-TERA " /proc/[0-9]*/mounts 2> /dev/null > /dev/mounts.tmp

    PRE_PID=0
    while read LINE ; do
        PID=`echo ${LINE#*/proc/}`
        PID=`echo ${PID%%/*}`
        if [ $PID -eq $PRE_PID ] ; then
            continue
        fi

        kill $PID 2> /dev/null
        sleep 0.1
        kill -9 $PID 2> /dev/null

        PRE_PID=$PID
    done < /dev/mounts.tmp

    rm /dev/mounts.tmp
}

function umount_sdcard()
{
    umount_bind_sdcard
    umount $MOUNT_MY_TERA 2> /dev/null
}

function uninstall()
{
    kill_open_files

    if [ "$SU_OPTION" != "" ] ; then
        su -c "$ARG0 umount_bind_sdcard"
        echo
    fi

    umount_sdcard
    kill_mounts
    umount_sdcard

    my_killall hcfsapid 2> /dev/null
    sleep 0.1
    my_killall -9 hcfsapid 2> /dev/null
    my_killall hcfs 2> /dev/null
    sleep 0.1
    my_killall -9 hcfs 2> /dev/null

    sleep 0.1

    rm -rf /data/hcfs /data/hcfs.conf /data/hcfs_android_log /data/hcfsapid.log /dev/shm

    mount -o rw,remount /system
    rm -rf /system/hcfs/
    mount -o ro,remount /system

    mount -o rw,remount /
    if [ -f /tmp/MY-TERA.tmp ] ; then
        umount /tmp/ 2> /dev/null
        rmdir /tmp 2> /dev/null
    fi
    rm -rf /storage/MY-TERA
    mount -o ro,remount /

    rm -rf $SDCARD/MY-TERA

    rm -rf $MOUNT_MY_TERA
}

function install()
{
    mount -o rw,remount /system
    mkdir -p /system/hcfs
    chmod 0755 /system/hcfs
    cp $EXE /sdcard/hcfs /sdcard/hcfsapid /sdcard/hcfsconf /sdcard/hcfs.conf /sdcard/HCFSvol /sdcard/libcurl.so /sdcard/libfuse.so /sdcard/libjansson.so /sdcard/libzip.so /system/hcfs/
    rm $EXE /sdcard/hcfs /sdcard/hcfsapid /sdcard/hcfsconf /sdcard/hcfs.conf /sdcard/HCFSvol /sdcard/libcurl.so /sdcard/libfuse.so /sdcard/libjansson.so /sdcard/libzip.so
    chown root:root /system/hcfs/hcfs.conf /system/hcfs/libcurl.so /system/hcfs/libfuse.so /system/hcfs/libjansson.so /system/hcfs/libzip.so
    chmod 0644 /system/hcfs/libcurl.so /system/hcfs/libfuse.so /system/hcfs/libjansson.so /system/hcfs/libzip.so
    chown root:system /system/hcfs/hcfs /system/hcfs/hcfsapid /system/hcfs/hcfsconf /system/hcfs/HCFSvol
    chmod 0755 /system/hcfs/hcfs /system/hcfs/hcfsapid /system/hcfs/hcfsconf /system/hcfs/HCFSvol
    chown root:root /system/hcfs/$EXE_NAME
    chmod 0755 /system/hcfs/$EXE_NAME
    mount -o ro,remount /system

    ls /data/app/com.hopebaytech.hcfsmgmt*/lib/arm64/ &> /dev/null
    if [ $? -eq 0 ] ; then
        LIB_PATH="/data/app/com.hopebaytech.hcfsmgmt*/lib/arm64/"
    else
        LIB_PATH="/data/data/com.hopebaytech.hcfsmgmt/lib/"
    fi
    cp /sdcard/libHCFS_api.so $LIB_PATH
    rm /sdcard/libHCFS_api.so
    chown system:system $LIB_PATH/libHCFS_api.so
    chmod 0755 $LIB_PATH/libHCFS_api.so

    mkdir -p /data/hcfs /data/hcfs/metastorage /data/hcfs/blockstorage
}

export LD_LIBRARY_PATH=/system/hcfs
export PATH=$PATH:/system/hcfs

trap "" SIGHUP

export MOUNT_MY_TERA="/dev/MY-TERA"

su --version
getprop ro.product.manufacturer
getprop ro.product.brand
getprop ro.product.model
getprop ro.product.name
getprop ro.build.version.release
df /data 2> /dev/null
echo

CPU64=`getprop ro.product.cpu.abilist64`
echo "CPU64=$CPU64"

LIB64="false"
if [ -d /system/lib64 ] ; then
    LIB64="true"
fi
echo "LIB64=$LIB64"

VERSION_SDK=`getprop ro.build.version.sdk`
echo "VERSION_SDK=$VERSION_SDK"

SDCARD="/sdcard"
while [ 1 ] ; do
    LINK=`readlink -f $SDCARD`
    if [ "$LINK" == "" -o "$LINK" == "$SDCARD" ] ; then
        break
    fi
    SDCARD=$LINK
done

echo "SDCARD=$SDCARD"

if [ "$ARG1" == "uninstall" ] ; then
    uninstall
    rm $EXE
    sync

    echo
    echo Tera Uninstall OK
    echo

    exit
fi

if [ "$ARG1" == "install" ] ; then
    if [ -e /system/hcfs -o -e /data/hcfs ] ; then
        rm $EXE

        echo
        echo Tera Already Install
        echo
        exit 1
    fi

    install

    rm -f $EXE

    echo
    echo Tera Install OK
    echo
fi

my_killall -0 hcfs 2> /dev/null
if [ $? -eq 0 ] ; then
    echo
    echo Tera Already Run
    echo

    exit 1
fi

if [ ! -d /tmp ] ; then
    mount -o rw,remount /
    mkdir -p /tmp
    chmod 0700 /tmp
    mount -t tmpfs -o mode=0755,gid=1000 tmpfs /tmp
    mount -o ro,remount /

    touch /tmp/MY-TERA.tmp
fi

mkdir -p $MOUNT_MY_TERA
chmod 0700 $MOUNT_MY_TERA

mkdir -p $SDCARD/MY-TERA
chmod 0777 $SDCARD/MY-TERA

rm -rf /dev/shm
mkdir -p /dev/shm
chown root:system /dev/shm
chmod 0770 /dev/shm

hcfsconf enc /system/hcfs/hcfs.conf /data/hcfs.conf
while [ ! -e /data/hcfs.conf ]; do sleep 0.1; done

#MEDIA_RW_ID=`id media_rw | sed "s/^uid=\([0-9]*\).*/\1/g"`
hcfs -o big_writes,writeback_cache,rw,nosuid,nodev,noexec,noatime,default_permissions,allow_other &
while [ ! -e /dev/shm/hcfs_reporter ]; do sleep 0.1; done

HCFSvol create hcfs_data internal

HCFSvol mount hcfs_data $MOUNT_MY_TERA
chmod 0700 $MOUNT_MY_TERA

bind_sdcard

HCFSvol create hcfs_external multiexternal

HCFSvol unpin $MOUNT_MY_TERA

rm -f /data/data/com.hopebaytech.hcfsmgmt/hcfsapid_sock
hcfsapid &
while [ ! -e /data/data/com.hopebaytech.hcfsmgmt/hcfsapid_sock ]; do sleep 0.1; done

#chown `ls -ld /data/data/com.hopebaytech.hcfsmgmt | tr -s " " | cut -d " " -f3,4 | tr " " ":"` /data/data/com.hopebaytech.hcfsmgmt/hcfsapid_sock
LS_APP=`ls -ld /data/data/com.hopebaytech.hcfsmgmt`
set -- $LS_APP
chown $3:$4 /data/data/com.hopebaytech.hcfsmgmt/hcfsapid_sock 2> /dev/null

sync

if [ "$ARG1" == "install" ] ; then
    am start -n com.hopebaytech.hcfsmgmt/.main.MainActivity
    #am start -n com.android.settings/.applications.InstalledAppDetails -d package:com.hopebaytech.hcfsmgmt
fi

echo
echo Tera Run OK
echo
echo MY-TERA: $MY_TERA_DIR
echo
